Clock consistency implementation in java
    --project 4 in CSCI 53700, Distributed System in IUPUI

references:
 1. http://www.javatpoint.com/RMI
 2. Using java-rmi in p2p applications
    http://isp.vsi.ru/library/Java/JExpSol/ch16.htm#CreatingPeertoPeerRMIApplications.

Author:Feng Li
Time: Nov 24st, 2016


Description:
    In distributed systems, there may be clock drifts among cocurrent processes, thus resulting ininconsistent timing schema. However with adjustments to the logic clocks during message passing between processes, this problem can be effectively addressed

1. Make:
    run 'make' in the package root directory

2. chmod +x *.sh
    give permission to all shell scripts

3. on four machines, type ./rmiregistry.sh to start registry

4. start in machine 1~ machine 4:
    ('4' means there are four processes in total, and the 0~3 are the id of different processes,
        read the 'More detailed Information' Section for more details)
    Machine 1:  java -Djava.security.policy=policy Main 4 0
    Machine 2:  java -Djava.security.policy=policy Main 4 1
    Machine 3:  java -Djava.security.policy=policy Main 4 2
    Machine 2:  java -Djava.security.policy=policy Main 4 3

5. In each machine you will get a prompt of:
        "Ready to connect to all the peers?(y/n)"
   Make sure you have already start all the processes in step 4, then in each machine, type: y to start counting

6. In each machine, after the program finish all the iterations, it will ask you
        "Ready to quit?(y/n)"
    Make sure all the four machines give this prompt, then you can type 'y' to quit the process in each machine



Output:
    results will be stored in 
	results/Counters_useSyn_${syn}_eventRange_${range}t_all.txt
	
    where:
        $syn: whether use the synchronization method or not: true or false
        $range: the eventTypeRange:integer no less than 3

    meaning:
        Each column is corresponding to 1 process, where the value of each row represent the time stamps of sequence of events
	

Log files:
    I also maintain a log file in logs/useSyn_${syn}_eventRange_${range}.log
    it shows more detailed information of the all events in the system

--------------------------------------------------------------------------------------------
More detailed Information

Basic command line format
    java -Djava.security.policy=policy Main numPO poID

    numPO:
         is how many POs in total, required
    poID:
         is the current PO id, must between 0~numPO-1


advanced command line format

    java -Djava.security.policy=policy Main numPO poID useSyn eventTypeRange

    useSyn: (default: true)
        can be either 'true' or 'false'
        if set to 'true', there logic clocks will be adjusted when receiving messages
        if set to 'false', no adjustments will be made when receiving messages

    eventTypeRange:(default: 6, this value should be no less than 3)
        this controls the probalbility of receiving event, which is
             (eventTypeRange-2)/ eventTypeRange
        Image this is the weight for all the events, both 'sending' and 'internal' event have a weight of 1, and 'receiving' event will have the remaining weight of eventTypeRange-2

example for advanced command:

    java -Djava.security.policy=policy Main 4 0 false 6
    in this case,this is the No.0 PO of all the four PO, no synchronziation measure is taken(baseline) and the probability of 'receiving' event is (6-2)/6 = 2/3

Change eventNumber
    you can decide how many events for each PO. change the 10th line:
        int eventNumber = 10000;

